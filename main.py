from telethon import TelegramClient, events, connection
from telethon.tl.functions.channels import JoinChannelRequest
from telethon.errors import SessionPasswordNeededError
from config import SESSIONS_DIR, DB_SESSIONS_DIR, LOG_FILE, MESSAGES_FILE, ENVELOPE_TIME_BEFORE_SEND_MESSAGE, MAX_ENVELOPE_MESSAGES_ALL_SESSIONS, ENVELOPE_EMOJI, MAX_LIMIT, DB_CLIENT_SESSION_NAME

import json, os, random, logging, asyncio, time, sys
import re

import socks, sys

class CustomFormatter(logging.Formatter):
    def format(self, record):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        record.msg = record.msg.encode('utf-8', 'replace').decode('utf-8')
        return super().format(record)

logging.basicConfig(
    level=logging.INFO,
    handlers=[
        logging.FileHandler(LOG_FILE, encoding='utf-8'),  
        logging.StreamHandler(sys.stdout)  
    ]
)

logger = logging.getLogger(__name__)
# —Ñ–æ—Ä–º–∞—Ç–µ—Ä
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(CustomFormatter('%(asctime)s - %(levelname)s - %(message)s'))
logger.addHandler(console_handler)

PROXY_FILE = 'proxy.txt'
mem_from_const = MAX_ENVELOPE_MESSAGES_ALL_SESSIONS # –±–µ—Ä–µ–º –≤—Ç–æ—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —á—Ç–æ–±—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç–æ–π 

def load_session_config(phone):
    session_path = os.path.join(SESSIONS_DIR, f'{phone}.json')
    if os.path.exists(session_path):
        with open(session_path, 'r') as file:
            return json.load(file)
    else:
        logger.error(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {session_path} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

def load_messages(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return [line.strip() for line in file.readlines()]

def generate_random_message(messages):
    random_message = random.choice(messages)
    return f"{random_message}!"

def generate_text_keyboard(keyboard):
    buttons = keyboard.rows
    result = []

    for row in buttons:
        for button in row.buttons:
            result.append(button.text)

    return result

async def like_people(phone, client):
    logger.info("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ like_people")
    staying_alive = False
    iterrations = 0
    buttons_not_found = 0
    buttons_not_found_2 = 0
    count_sended_envelope = 0
    count_dislike = 0

    generated_message = load_messages(MESSAGES_FILE)
    
    while True:
        '''while iterrations < MAX_LIMIT:
            try:
                bot = await client.get_entity('leomatchbot')
                messages = await client.get_messages(bot, limit=1)
                reply_markup = messages[0].reply_markup
                
                if buttons_not_found >= 2:
                    client.send_message(bot, "1")
                    messages = await client.get_messages(bot, limit=1)
                    await messages[0].click()

                if buttons_not_found >= 3:
                    buttons_not_found = 0
                    await client.send_message(bot, "/myprofile")
                    messages = await client.get_messages(bot, limit=1)
                    await messages[0].click()
                    
                if not reply_markup:
                    buttons_not_found += 1
                    logger.error(f"({phone}) –ü–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –¥–µ–ª–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ä—ã–º —Å–æ–æ–±—â–µ–Ω–∏—è–º")
                    i = 1
                    while True:
                        await asyncio.sleep(5)
                        messages = await client.get_messages(bot, limit=i)
                        reply_markup = messages[-1].reply_markup
                        if not reply_markup:
                            i += 1
                        else:
                            break

                keyboard_text = generate_text_keyboard(reply_markup)
                if reply_markup:
                    logger.info(f"({phone}) –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞: {keyboard_text}")

                found = False
                buttons = reply_markup.rows

                for row in buttons:
                    for button in row.buttons:
                        if count_sended_envelope >= MAX_ENVELOPE_MESSAGES_ALL_SESSIONS:
                            if count_dislike == 0:
                                await client.send_message(bot, "üëé")
                                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–∏–∑–ª–∞–π–∫ –ø–æ—Å–ª–µ {count_sended_envelope} –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤.")
                                count_dislike += 1
                                count_sended_envelope = 0
                                iterrations += 1 
                                logger.info(f"[{phone}] –ò–¢–ï–†–ê–¶–ò–Ø #{iterrations} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ü–∏–∫–ª–µ –¥–∏–∑–ª–∞–π–∫–∞")
                                await asyncio.sleep(1)
                                continue

                        if any(char in item for item in button.text for char in ENVELOPE_EMOJI if char.strip()):
                            await client.send_message(bot, button.text)
                            found = True
                            logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ {button.text}")
                            random_message = generate_random_message(generated_message)
                            await asyncio.sleep(1)
                            logger.info(f"–°–ø–∏–º –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {ENVELOPE_TIME_BEFORE_SEND_MESSAGE} —Å–µ–∫—É–Ω–¥")
                            await asyncio.sleep(ENVELOPE_TIME_BEFORE_SEND_MESSAGE)
                            await client.send_message(bot, random_message)
                            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {random_message}")

                            count_sended_envelope += 1
                            count_dislike = 0  
                            break

                    if found:
                        buttons_not_found = 0
                        break

                if not found and buttons_not_found_2 < 4:
                    logger.info(f"({phone})({keyboard_text}) –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É, –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é")
                    buttons_not_found_2 += 1
                    await messages[0].click()
                elif not found and buttons_not_found_2 >= 3:
                    try:
                        logger.info(f"({phone})({keyboard_text}) –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∂–∞—Ç—å –Ω–∏ –Ω–∞ –æ–¥–Ω—É –∫–Ω–æ–ø–∫—É 3 —Ä–∞–∑–∞, –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ –≤—Ç–æ—Ä—É—é")
                        buttons_not_found_2 = 0
                        client.send_message(bot, "1")
                    except Exception as e:
                        logger.error(f"({phone}) –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞")
                        break
                    
                await asyncio.sleep(3)
                logger.info(f"[{phone}] –ò–¢–ï–†–ê–¶–ò–Ø #{iterrations}")
                
            except Exception:
                x = 0
                x += 1
                x -= 1 '''
        # –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
        while True:
            if staying_alive == False:
                logger.info("–ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ —Å–∏—Ç—É–∞—Ü–∏–µ–π, –±–æ–ª—å—à–µ –Ω–µ —Ç—ã–∫–∞–µ–º –Ω–∏–∫—É–¥–∞!")
                staying_alive = True
            await asyncio.Event().wait()
            
CLIENT_DB_SESSION = None

async def initialize_client_db_session(api_id, api_hash, proxy_info):
    global CLIENT_DB_SESSION
    session_file_db = os.path.join(DB_SESSIONS_DIR, f'{DB_CLIENT_SESSION_NAME}.session')
    
    if CLIENT_DB_SESSION is None:
        if proxy_info["type"] == "MTPROTO":
            CLIENT_DB_SESSION = TelegramClient(
                session_file_db,
                api_id,
                api_hash,
                proxy=proxy_info["connection_cortege"],
                connection=proxy_info["connection"], 
                device_model='iPhone X', 
                system_version='16', 
                app_version='0.15.3.2'
            )
        elif proxy_info["type"] in ["HTTP", "SOCKS5"]:
            CLIENT_DB_SESSION = TelegramClient(
                session_file_db,
                api_id,
                api_hash,
                proxy=proxy_info["connection_cortege"], 
                device_model='iPhone X', 
                system_version='16', 
                app_version='0.15.3.2'
            )
        else:
            CLIENT_DB_SESSION = TelegramClient(session_file_db, api_id, api_hash, device_model='iPhone X', system_version='16', app_version='0.15.3.2')
        
        await CLIENT_DB_SESSION.start()
        logger.info("CLIENT_DB_SESSION —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

async def process_session(phone):
    config = load_session_config(phone)
    if not config:
        return

    api_id = config.get('app_id')
    api_hash = config.get('app_hash')
    session_file = os.path.join(SESSIONS_DIR, f'{phone}.session')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∫—Å–∏
    proxy = config.get('proxy')
    proxy_type = config.get('proxy_type', '').upper()
    proxy_info = {
        "type": proxy_type,
        "connection": None,
        "connection_cortege": None
    }

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ç–µ–∂–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
    if proxy and proxy_type in ["HTTP", "SOCKS5"]:
        proxy_info["connection_cortege"] = (proxy_type, proxy[1], proxy[2], proxy[3], proxy[4], proxy[5])
        print(proxy_info)
    elif proxy and proxy_type == "MTPROTO":
        proxy_info["connection"] = "ConnectionTcpMTProxy"
        proxy_info["connection_cortege"] = (proxy[1], proxy[2], proxy[5])

    CLIENT_DB_SESSION = DB_CLIENT_SESSION_NAME
    session_file_db = os.path.join(DB_SESSIONS_DIR, f'{CLIENT_DB_SESSION}.session')
    
    if proxy_info["type"] == "MTPROTO":
        CLIENT_DB_SESSION = TelegramClient(
            session_file_db,
            api_id,
            api_hash,
            proxy=proxy_info["connection_cortege"],
            connection=proxy_info["connection"], 
            device_model='iPhone X', 
            system_version='16', 
            app_version='0.15.3.2'
        )
    elif proxy_info["type"] == "HTTP" or proxy_info["type"] == "SOCKS5":
        CLIENT_DB_SESSION = TelegramClient(
            session_file_db,
            api_id,
            api_hash,
            proxy=proxy_info["connection_cortege"], 
            device_model='iPhone X', 
            system_version='16', 
            app_version='0.15.3.2'
        )
    else:
        CLIENT_DB_SESSION = TelegramClient(session_file_db, api_id, api_hash, device_model='iPhone X', system_version='16', app_version='0.15.3.2')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
    if proxy_info["type"] == "MTPROTO":
        client = TelegramClient(
            session_file,
            api_id,
            api_hash,
            proxy=proxy_info["connection_cortege"],
            connection=proxy_info["connection"], 
            device_model='iPhone 16', 
            system_version='16', 
            app_version='0.15.3.2'
        )
    elif proxy_info["type"] == "HTTP" or proxy_info["type"] == "SOCKS5":
        client = TelegramClient(
            session_file,
            api_id,
            api_hash,
            proxy=proxy_info["connection_cortege"], 
            device_model='iPhone 16', 
            system_version='16', 
            app_version='0.15.3.2'
        )
    else:
        client = TelegramClient(session_file, api_id, api_hash, device_model='iPhone 16', system_version='16', app_version='0.15.3.2')
    
    try:
        await client.start(phone=phone)
        if await client.is_user_authorized():
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {phone}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è {phone}")
            
        await CLIENT_DB_SESSION.start(phone=CLIENT_DB_SESSION)
        if await CLIENT_DB_SESSION.is_user_authorized():
            logger.info(f"–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –¥–ª—è {CLIENT_DB_SESSION}")
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è {CLIENT_DB_SESSION}")
            
        soob = await client.get_entity('pidorasalbak52suiiii')

        @client.on(events.NewMessage(pattern='–û—Ç–ª–∏—á–Ω–æ! –ù–∞–¥–µ—é—Å—å —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ–¥–µ—Ç–µ –≤—Ä–µ–º—è', blacklist_chats=True, chats=soob))
        async def handle_favorite_message(event):
            formatted_text = event.message.message
            await CLIENT_DB_SESSION.send_message('me', formatted_text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è {phone}: {formatted_text}")

        @client.on(events.NewMessage(pattern='–ï—Å—Ç—å –≤–∑–∞–∏–º–Ω–∞—è —Å–∏–º–ø–∞—Ç–∏—è! –ù–∞—á–∏–Ω–∞–π –æ–±—â–∞—Ç—å—Å—è', blacklist_chats=True, chats=soob))
        async def handle_favorite_message(event):
            formatted_text = event.message.message
            await CLIENT_DB_SESSION.send_message('me', formatted_text)
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –¥–ª—è {phone}: {formatted_text}")
            
        @client.on(events.NewMessage(pattern=r'–¢—ã –ø–æ–Ω—Ä–∞–≤–∏–ª', blacklist_chats=True, chats=soob))
        async def handle_favorite_message(event):
            bot = await client.get_entity('leomatchbot')
            await asyncio.sleep(1)
            await client.send_message(bot, "1")
            logger.info(f"–ü—Ä–∏—à—ë–ª –ª–∞–π–∫ –¥–ª—è {phone}: {event.raw_text}")

        @client.on(events.NewMessage(pattern=r'–ö–æ–º—É-—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å', blacklist_chats=True, chats=soob))
        async def handle_favorite_message(event):
            bot = await client.get_entity('leomatchbot')
            await asyncio.sleep(1)
            await client.send_message(bot, "1")
            logger.info(f"–ü—Ä–∏—à—ë–ª –ª–∞–π–∫ –¥–ª—è {phone}: {event.raw_text}")
            
        @client.on(events.NewMessage(pattern=r'–ë—É—Å—Ç –ø–æ–≤—ã—à–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –º–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞', blacklist_chats=True, chats=soob))
        async def handle_favorite_message(event):
            channel = await client.get_entity('leoday')
            await client(JoinChannelRequest(channel))
            logger.info(f"–ö–∞–∂–µ—Ç—Å—è –∫—Ç–æ-—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {phone}: {event.raw_text}")
            
        @client.on(events.NewMessage(pattern=r'–±—É—Å—Ç —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç—ã –ø–æ–Ω–∏–∂–µ–Ω', blacklist_chats=True, chats=soob))
        async def handle_favorite_message(event):
            channel = await client.get_entity('leoday')
            await client(JoinChannelRequest(channel))
            logger.info(f"–ö–∞–∂–µ—Ç—Å—è –∫—Ç–æ-—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª {phone}: {event.raw_text}")

        await like_people(phone, client)

    except SessionPasswordNeededError:
        logger.error(f"–ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è {phone}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–ª—è {phone}: {e}")
    finally:
        await client.disconnect()

async def main():  
    phones = [f.split('.')[0] for f in os.listdir(SESSIONS_DIR) if f.endswith('.session')]
    if not phones:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π —Å–µ—Å—Å–∏–∏ –≤ –ø–∞–ø–∫–µ.")
        return

    tasks = [asyncio.create_task(process_session(phone)) for phone in phones]
    await asyncio.gather(*tasks)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("bye :)")